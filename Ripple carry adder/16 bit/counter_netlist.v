
// Generated by Cadence Genus(TM) Synthesis Solution 20.11-s111_1
// Generated on: Dec 12 2024 17:11:04 IST (Dec 12 2024 11:41:04 UTC)

// Verification Directory fv/RCA 

module fulladder(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_2, n_3, n_4;
  OAI21X2 g83(.A0 (n_1), .A1 (n_3), .B0 (n_2), .Y (carry));
  MXI2XL g84(.A (n_1), .B (z), .S0 (n_4), .Y (sum));
  CLKXOR2X1 g85(.A (x), .B (y), .Y (n_4));
  NOR2X2 g86(.A (x), .B (y), .Y (n_3));
  NAND2X2 g87(.A (y), .B (x), .Y (n_2));
  CLKINVX1 g88(.A (z), .Y (n_1));
endmodule

module fulladder_30(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2, n_3, n_4, n_5;
  NAND2X2 g44(.A (n_3), .B (n_5), .Y (carry));
  XOR2XL g45(.A (n_4), .B (n_0), .Y (sum));
  NAND2X1 g46(.A (n_4), .B (z), .Y (n_5));
  OAI22X1 g47(.A0 (y), .A1 (n_2), .B0 (x), .B1 (n_1), .Y (n_4));
  NAND2XL g48(.A (x), .B (y), .Y (n_3));
  CLKINVX1 g49(.A (x), .Y (n_2));
  CLKINVX1 g50(.A (y), .Y (n_1));
  DLY2X1 g51(.A (z), .Y (n_0));
endmodule

module fulladder_29(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2;
  NAND2X2 g44(.A (n_1), .B (n_2), .Y (carry));
  XOR2XL g45(.A (z), .B (n_0), .Y (sum));
  NAND2X2 g46(.A (n_0), .B (z), .Y (n_2));
  NAND2XL g48(.A (x), .B (y), .Y (n_1));
  CLKXOR2X1 g2(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_28(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_7;
  XOR2XL g45(.A (z), .B (n_0), .Y (sum));
  NAND2X1 g46(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g2(.A (x), .B (y), .Y (n_0));
  NAND2X1 g49(.A (n_7), .B (n_1), .Y (carry));
  NAND2X2 g3(.A (x), .B (y), .Y (n_7));
endmodule

module fulladder_27(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_5, n_12, n_13, n_15;
  XOR2XL g45(.A (n_0), .B (n_5), .Y (sum));
  DLY2X1 g50(.A (z), .Y (n_5));
  INVX1 drc_bufs54(.A (y), .Y (n_1));
  XOR2XL g56(.A (x), .B (y), .Y (n_0));
  NAND2X2 g57(.A (n_12), .B (z), .Y (n_13));
  XNOR2X1 g58(.A (x), .B (n_1), .Y (n_12));
  NAND2X2 g2(.A (n_15), .B (n_13), .Y (carry));
  NAND2BX2 g3(.AN (n_1), .B (x), .Y (n_15));
endmodule

module fulladder_26(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2;
  NAND2X2 g44(.A (n_0), .B (n_2), .Y (carry));
  XOR2XL g45(.A (z), .B (n_1), .Y (sum));
  NAND2X2 g46(.A (n_1), .B (z), .Y (n_2));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_1));
  NAND2XL g48(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_25(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2;
  NAND2X2 g44(.A (n_0), .B (n_2), .Y (carry));
  XOR2XL g45(.A (z), .B (n_1), .Y (sum));
  NAND2X2 g46(.A (n_1), .B (z), .Y (n_2));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_1));
  NAND2XL g48(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_24(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_7;
  XOR2XL g48(.A (z), .B (n_0), .Y (sum));
  NAND2X2 g49(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g50(.A (x), .B (y), .Y (n_0));
  NAND2X2 g2(.A (n_7), .B (n_1), .Y (carry));
  NAND2X4 g3(.A (y), .B (x), .Y (n_7));
endmodule

module fulladder_23(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2, n_8;
  XOR2XL g48(.A (n_1), .B (n_0), .Y (sum));
  NAND2X2 g49(.A (n_1), .B (z), .Y (n_2));
  CLKXOR2X1 g50(.A (x), .B (y), .Y (n_1));
  CLKBUFX2 fopt(.A (z), .Y (n_0));
  NAND2X2 g2(.A (n_8), .B (n_2), .Y (carry));
  NAND2X4 g3(.A (y), .B (x), .Y (n_8));
endmodule

module fulladder_22(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_2, n_7;
  NAND2X1 g49(.A (n_1), .B (z), .Y (n_2));
  CLKXOR2X1 g50(.A (x), .B (y), .Y (n_1));
  XOR2XL g2(.A (z), .B (n_1), .Y (sum));
  NAND2X1 g52(.A (n_7), .B (n_2), .Y (carry));
  NAND2X2 g3(.A (x), .B (y), .Y (n_7));
endmodule

module fulladder_21(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_2, n_3, n_4, n_5;
  NAND2X1 g49(.A (n_4), .B (z), .Y (n_5));
  CLKXOR2X1 g50(.A (x), .B (y), .Y (n_4));
  INVXL fopt52(.A (z), .Y (n_3));
  NAND2X1 g2(.A (n_2), .B (n_5), .Y (carry));
  NAND2XL g3(.A (x), .B (y), .Y (n_2));
  XNOR2XL g55(.A (n_3), .B (n_4), .Y (sum));
endmodule

module fulladder_20(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_2, n_3, n_4, n_5;
  NAND2X1 g49(.A (n_4), .B (z), .Y (n_5));
  CLKXOR2X1 g50(.A (x), .B (y), .Y (n_4));
  INVXL fopt52(.A (z), .Y (n_3));
  NAND2X1 g2(.A (n_2), .B (n_5), .Y (carry));
  NAND2XL g3(.A (x), .B (y), .Y (n_2));
  XNOR2XL g55(.A (n_3), .B (n_4), .Y (sum));
endmodule

module fulladder_19(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_2, n_3, n_4, n_5;
  NAND2X1 g49(.A (n_4), .B (z), .Y (n_5));
  CLKXOR2X1 g50(.A (x), .B (y), .Y (n_4));
  INVXL g52(.A (z), .Y (n_3));
  NAND2X1 g2(.A (n_2), .B (n_5), .Y (carry));
  NAND2XL g3(.A (x), .B (y), .Y (n_2));
  XNOR2XL g55(.A (n_3), .B (n_4), .Y (sum));
endmodule

module fulladder_18(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_4, n_5;
  NAND2X2 g49(.A (n_4), .B (z), .Y (n_5));
  CLKXOR2X1 g50(.A (x), .B (y), .Y (n_4));
  NAND2X2 g2(.A (n_1), .B (n_5), .Y (carry));
  NAND2XL g3(.A (x), .B (y), .Y (n_1));
  XOR2XL g57(.A (z), .B (n_4), .Y (sum));
endmodule

module fulladder_17(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_3, n_4;
  NAND2X1 g46(.A (n_3), .B (z), .Y (n_4));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_3));
  NAND2X1 g2(.A (n_1), .B (n_4), .Y (carry));
  NAND2XL g3(.A (x), .B (y), .Y (n_1));
  XOR2XL g49(.A (z), .B (n_3), .Y (sum));
endmodule

module fulladder_16(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2;
  OAI21X1 g41(.A0 (n_2), .A1 (n_0), .B0 (n_1), .Y (carry));
  MXI2X1 g42(.A (z), .B (n_0), .S0 (n_2), .Y (sum));
  XNOR2X1 g43(.A (x), .B (y), .Y (n_2));
  NAND2XL g44(.A (x), .B (y), .Y (n_1));
  INVX1 g45(.A (z), .Y (n_0));
endmodule

module RCA(clk, reset, A_in, B_in, Cin_in, SUM_out, Cout_out);
  input clk, reset, Cin_in;
  input [15:0] A_in, B_in;
  output [15:0] SUM_out;
  output Cout_out;
  wire clk, reset, Cin_in;
  wire [15:0] A_in, B_in;
  wire [15:0] SUM_out;
  wire Cout_out;
  wire [15:0] A;
  wire [15:0] B;
  wire [15:0] SUM_internal;
  wire [14:0] C;
  wire Cin, Cout_internal, UNCONNECTED, n_0;
  fulladder adder0(.x (A[0]), .y (B[0]), .z (Cin), .sum
       (SUM_internal[0]), .carry (C[0]));
  fulladder_30 adder1(.x (A[1]), .y (B[1]), .z (C[0]), .sum
       (SUM_internal[1]), .carry (C[1]));
  fulladder_29 adder2(.x (A[2]), .y (B[2]), .z (C[1]), .sum
       (SUM_internal[2]), .carry (C[2]));
  fulladder_28 adder3(.x (A[3]), .y (B[3]), .z (C[2]), .sum
       (SUM_internal[3]), .carry (C[3]));
  fulladder_27 adder4(.x (A[4]), .y (B[4]), .z (C[3]), .sum
       (SUM_internal[4]), .carry (C[4]));
  fulladder_26 adder5(.x (A[5]), .y (B[5]), .z (C[4]), .sum
       (SUM_internal[5]), .carry (C[5]));
  fulladder_25 adder6(.x (A[6]), .y (B[6]), .z (C[5]), .sum
       (SUM_internal[6]), .carry (C[6]));
  fulladder_24 adder7(.x (A[7]), .y (B[7]), .z (C[6]), .sum
       (SUM_internal[7]), .carry (C[7]));
  fulladder_23 adder8(.x (A[8]), .y (B[8]), .z (C[7]), .sum
       (SUM_internal[8]), .carry (C[8]));
  fulladder_22 adder9(.x (A[9]), .y (B[9]), .z (C[8]), .sum
       (SUM_internal[9]), .carry (C[9]));
  fulladder_21 adder10(.x (A[10]), .y (B[10]), .z (C[9]), .sum
       (SUM_internal[10]), .carry (C[10]));
  fulladder_20 adder11(.x (A[11]), .y (B[11]), .z (C[10]), .sum
       (SUM_internal[11]), .carry (C[11]));
  fulladder_19 adder12(.x (A[12]), .y (B[12]), .z (C[11]), .sum
       (SUM_internal[12]), .carry (C[12]));
  fulladder_18 adder13(.x (A[13]), .y (B[13]), .z (C[12]), .sum
       (SUM_internal[13]), .carry (C[13]));
  fulladder_17 adder14(.x (A[14]), .y (B[14]), .z (C[13]), .sum
       (SUM_internal[14]), .carry (C[14]));
  fulladder_16 adder15(.x (A[15]), .y (B[15]), .z (C[14]), .sum
       (SUM_internal[15]), .carry (Cout_internal));
  DFFRHQX8 \SUM_out_reg[15] (.RN (n_0), .CK (clk), .D
       (SUM_internal[15]), .Q (SUM_out[15]));
  DFFRHQX1 Cout_out_reg(.RN (n_0), .CK (clk), .D (Cout_internal), .Q
       (Cout_out));
  DFFRHQX1 \SUM_out_reg[14] (.RN (n_0), .CK (clk), .D
       (SUM_internal[14]), .Q (SUM_out[14]));
  DFFRHQX1 \SUM_out_reg[13] (.RN (n_0), .CK (clk), .D
       (SUM_internal[13]), .Q (SUM_out[13]));
  DFFRHQX1 \SUM_out_reg[12] (.RN (n_0), .CK (clk), .D
       (SUM_internal[12]), .Q (SUM_out[12]));
  DFFRHQX1 \SUM_out_reg[11] (.RN (n_0), .CK (clk), .D
       (SUM_internal[11]), .Q (SUM_out[11]));
  DFFRHQX1 \SUM_out_reg[10] (.RN (n_0), .CK (clk), .D
       (SUM_internal[10]), .Q (SUM_out[10]));
  DFFRHQX1 \SUM_out_reg[9] (.RN (n_0), .CK (clk), .D (SUM_internal[9]),
       .Q (SUM_out[9]));
  DFFRHQX1 \SUM_out_reg[8] (.RN (n_0), .CK (clk), .D (SUM_internal[8]),
       .Q (SUM_out[8]));
  DFFRHQX1 \SUM_out_reg[7] (.RN (n_0), .CK (clk), .D (SUM_internal[7]),
       .Q (SUM_out[7]));
  DFFRHQX1 \SUM_out_reg[6] (.RN (n_0), .CK (clk), .D (SUM_internal[6]),
       .Q (SUM_out[6]));
  DFFRHQX1 \SUM_out_reg[5] (.RN (n_0), .CK (clk), .D (SUM_internal[5]),
       .Q (SUM_out[5]));
  DFFRHQX1 \SUM_out_reg[4] (.RN (n_0), .CK (clk), .D (SUM_internal[4]),
       .Q (SUM_out[4]));
  DFFRHQX1 \SUM_out_reg[3] (.RN (n_0), .CK (clk), .D (SUM_internal[3]),
       .Q (SUM_out[3]));
  DFFRHQX1 \SUM_out_reg[2] (.RN (n_0), .CK (clk), .D (SUM_internal[2]),
       .Q (SUM_out[2]));
  DFFRHQX1 \SUM_out_reg[1] (.RN (n_0), .CK (clk), .D (SUM_internal[1]),
       .Q (SUM_out[1]));
  DFFRHQX1 \SUM_out_reg[0] (.RN (n_0), .CK (clk), .D (SUM_internal[0]),
       .Q (SUM_out[0]));
  DFFRHQX1 \B_reg[10] (.RN (n_0), .CK (clk), .D (B_in[10]), .Q (B[10]));
  DFFRHQX1 \A_reg[2] (.RN (n_0), .CK (clk), .D (A_in[2]), .Q (A[2]));
  DFFRHQX1 \A_reg[14] (.RN (n_0), .CK (clk), .D (A_in[14]), .Q (A[14]));
  DFFRHQX1 \B_reg[8] (.RN (n_0), .CK (clk), .D (B_in[8]), .Q (B[8]));
  DFFRHQX1 \A_reg[4] (.RN (n_0), .CK (clk), .D (A_in[4]), .Q (A[4]));
  DFFRHQX1 \A_reg[12] (.RN (n_0), .CK (clk), .D (A_in[12]), .Q (A[12]));
  DFFRHQX1 \A_reg[15] (.RN (n_0), .CK (clk), .D (A_in[15]), .Q (A[15]));
  DFFRHQX1 \B_reg[15] (.RN (n_0), .CK (clk), .D (B_in[15]), .Q (B[15]));
  DFFRHQX1 \B_reg[14] (.RN (n_0), .CK (clk), .D (B_in[14]), .Q (B[14]));
  DFFRHQX1 \A_reg[13] (.RN (n_0), .CK (clk), .D (A_in[13]), .Q (A[13]));
  DFFRHQX1 \B_reg[13] (.RN (n_0), .CK (clk), .D (B_in[13]), .Q (B[13]));
  DFFRHQX1 \B_reg[12] (.RN (n_0), .CK (clk), .D (B_in[12]), .Q (B[12]));
  DFFRHQX1 \A_reg[11] (.RN (n_0), .CK (clk), .D (A_in[11]), .Q (A[11]));
  DFFRHQX1 \B_reg[11] (.RN (n_0), .CK (clk), .D (B_in[11]), .Q (B[11]));
  DFFRHQX1 \B_reg[6] (.RN (n_0), .CK (clk), .D (B_in[6]), .Q (B[6]));
  DFFRHQX1 \B_reg[9] (.RN (n_0), .CK (clk), .D (B_in[9]), .Q (B[9]));
  DFFRHQX1 \A_reg[9] (.RN (n_0), .CK (clk), .D (A_in[9]), .Q (A[9]));
  DFFRHQX1 \A_reg[8] (.RN (n_0), .CK (clk), .D (A_in[8]), .Q (A[8]));
  DFFRHQX1 \B_reg[7] (.RN (n_0), .CK (clk), .D (B_in[7]), .Q (B[7]));
  DFFRHQX1 \A_reg[7] (.RN (n_0), .CK (clk), .D (A_in[7]), .Q (A[7]));
  DFFRHQX1 \A_reg[10] (.RN (n_0), .CK (clk), .D (A_in[10]), .Q (A[10]));
  DFFRHQX1 \A_reg[6] (.RN (n_0), .CK (clk), .D (A_in[6]), .Q (A[6]));
  DFFRHQX1 \A_reg[5] (.RN (n_0), .CK (clk), .D (A_in[5]), .Q (A[5]));
  DFFRHQX1 \B_reg[5] (.RN (n_0), .CK (clk), .D (B_in[5]), .Q (B[5]));
  DFFRHQX1 \B_reg[4] (.RN (n_0), .CK (clk), .D (B_in[4]), .Q (B[4]));
  DFFRHQX1 \B_reg[3] (.RN (n_0), .CK (clk), .D (B_in[3]), .Q (B[3]));
  DFFRHQX1 \A_reg[3] (.RN (n_0), .CK (clk), .D (A_in[3]), .Q (A[3]));
  DFFRHQX1 \B_reg[2] (.RN (n_0), .CK (clk), .D (B_in[2]), .Q (B[2]));
  DFFRHQX1 \B_reg[1] (.RN (n_0), .CK (clk), .D (B_in[1]), .Q (B[1]));
  DFFRHQX2 \A_reg[1] (.RN (n_0), .CK (clk), .D (A_in[1]), .Q (A[1]));
  DFFRHQX1 Cin_reg(.RN (n_0), .CK (clk), .D (Cin_in), .Q (Cin));
  INVXL g57(.A (reset), .Y (n_0));
  DFFRX2 \B_reg[0] (.RN (n_0), .CK (clk), .D (B_in[0]), .Q (B[0]), .QN
       (UNCONNECTED));
  DFFRHQX4 \A_reg[0] (.RN (n_0), .CK (clk), .D (A_in[0]), .Q (A[0]));
endmodule

