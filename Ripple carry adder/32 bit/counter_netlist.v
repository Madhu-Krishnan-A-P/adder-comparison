
// Generated by Cadence Genus(TM) Synthesis Solution 20.11-s111_1
// Generated on: Dec 12 2024 17:18:03 IST (Dec 12 2024 11:48:03 UTC)

// Verification Directory fv/RCA 

module fulladder(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2, n_3;
  OAI21X1 g83(.A0 (n_0), .A1 (n_2), .B0 (n_1), .Y (carry));
  MXI2XL g84(.A (n_0), .B (z), .S0 (n_3), .Y (sum));
  CLKXOR2X1 g85(.A (x), .B (y), .Y (n_3));
  NOR2XL g86(.A (x), .B (y), .Y (n_2));
  NAND2XL g87(.A (x), .B (y), .Y (n_1));
  CLKINVX1 g88(.A (z), .Y (n_0));
endmodule

module fulladder_62(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_4, n_10;
  OAI2BB1X1 g44(.A0N (x), .A1N (y), .B0 (n_4), .Y (carry));
  XOR2XL g45(.A (n_10), .B (n_0), .Y (sum));
  NAND2X1 g46(.A (n_10), .B (z), .Y (n_4));
  DLY2X1 g50(.A (z), .Y (n_0));
  CLKXOR2X1 g2(.A (y), .B (x), .Y (n_10));
endmodule

module fulladder_61(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_3, n_5, n_11;
  NAND2X2 g44(.A (n_5), .B (n_3), .Y (carry));
  XOR2XL g45(.A (z), .B (n_11), .Y (sum));
  NAND2XL g48(.A (x), .B (y), .Y (n_5));
  NAND2X1 g2(.A (n_11), .B (z), .Y (n_3));
  CLKXOR2X1 g56(.A (x), .B (y), .Y (n_11));
endmodule

module fulladder_60(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X2 g44(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g45(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g46(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_59(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2;
  NAND2X2 g44(.A (n_0), .B (n_2), .Y (carry));
  XOR2XL g45(.A (n_1), .B (z), .Y (sum));
  NAND2X1 g46(.A (n_1), .B (z), .Y (n_2));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_1));
  NAND2XL g48(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_58(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X2 g44(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g45(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g46(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g2(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_57(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X2 g44(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g45(.A (n_0), .B (z), .Y (sum));
  NAND2X2 g46(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_56(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g44(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g45(.A (z), .B (n_0), .Y (sum));
  NAND2X1 g46(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_55(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X2 g44(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g45(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g46(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_54(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g44(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g45(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g46(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_53(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g43(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_52(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (x), .A1N (y), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  NAND2XL g43(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_51(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g43(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_50(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0;
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
  AO22X1 g2(.A0 (x), .A1 (y), .B0 (n_0), .B1 (z), .Y (carry));
endmodule

module fulladder_49(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (z), .B (n_0), .Y (sum));
  NAND2XL g43(.A (z), .B (n_0), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_48(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0;
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
  AO22X1 g2(.A0 (x), .A1 (y), .B0 (n_0), .B1 (z), .Y (carry));
endmodule

module fulladder_47(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g43(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_46(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0;
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
  AO22X1 g2(.A0 (x), .A1 (y), .B0 (n_0), .B1 (z), .Y (carry));
endmodule

module fulladder_45(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g43(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_44(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g43(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_43(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g43(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_42(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (y), .A1N (x), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  NAND2X1 g43(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_41(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (x), .A1N (y), .B0 (n_1), .Y (carry));
  XOR2XL g42(.A (n_0), .B (z), .Y (sum));
  NAND2XL g43(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_40(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (n_1), .A1N (z), .B0 (n_0), .Y (carry));
  XOR2XL g42(.A (n_1), .B (z), .Y (sum));
  CLKXOR2X1 g43(.A (x), .B (y), .Y (n_1));
  NAND2XL g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_39(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  OAI2BB1X1 g41(.A0N (n_1), .A1N (z), .B0 (n_0), .Y (carry));
  XOR2XL g42(.A (n_1), .B (z), .Y (sum));
  CLKXOR2X1 g43(.A (x), .B (y), .Y (n_1));
  NAND2XL g44(.A (x), .B (y), .Y (n_0));
endmodule

module fulladder_38(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_2;
  OAI2BB1X1 g41(.A0N (n_2), .A1N (z), .B0 (n_1), .Y (carry));
  CLKXOR2X1 g43(.A (x), .B (y), .Y (n_2));
  NAND2XL g44(.A (x), .B (y), .Y (n_1));
  XOR2XL g2(.A (z), .B (n_2), .Y (sum));
endmodule

module fulladder_37(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_2;
  OAI2BB1X1 g41(.A0N (n_2), .A1N (z), .B0 (n_1), .Y (carry));
  CLKXOR2X1 g43(.A (x), .B (y), .Y (n_2));
  NAND2XL g44(.A (x), .B (y), .Y (n_1));
  XOR2XL g2(.A (z), .B (n_2), .Y (sum));
endmodule

module fulladder_36(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_2;
  OAI2BB1X1 g41(.A0N (x), .A1N (y), .B0 (n_2), .Y (carry));
  NAND2XL g43(.A (n_1), .B (z), .Y (n_2));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_1));
  XOR2XL g2(.A (z), .B (n_1), .Y (sum));
endmodule

module fulladder_35(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_2;
  OAI2BB1X1 g41(.A0N (x), .A1N (y), .B0 (n_2), .Y (carry));
  NAND2XL g43(.A (n_1), .B (z), .Y (n_2));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_1));
  XOR2XL g2(.A (z), .B (n_1), .Y (sum));
endmodule

module fulladder_34(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1;
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_1));
  XOR2XL g47(.A (z), .B (n_1), .Y (sum));
  AO22X1 g2(.A0 (x), .A1 (y), .B0 (n_1), .B1 (z), .Y (carry));
endmodule

module fulladder_33(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_2, n_3;
  OAI2BB1X1 g41(.A0N (x), .A1N (y), .B0 (n_3), .Y (carry));
  NAND2XL g43(.A (n_2), .B (z), .Y (n_3));
  CLKXOR2X1 g44(.A (x), .B (y), .Y (n_2));
  XOR2XL g2(.A (z), .B (n_2), .Y (sum));
endmodule

module fulladder_32(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2;
  OAI21X1 g41(.A0 (n_2), .A1 (n_0), .B0 (n_1), .Y (carry));
  MXI2XL g42(.A (z), .B (n_0), .S0 (n_2), .Y (sum));
  XNOR2X1 g43(.A (x), .B (y), .Y (n_2));
  NAND2XL g44(.A (x), .B (y), .Y (n_1));
  INVX1 g45(.A (z), .Y (n_0));
endmodule

module RCA(clk, reset, A_in, B_in, Cin_in, SUM_out, Cout_out);
  input clk, reset, Cin_in;
  input [31:0] A_in, B_in;
  output [31:0] SUM_out;
  output Cout_out;
  wire clk, reset, Cin_in;
  wire [31:0] A_in, B_in;
  wire [31:0] SUM_out;
  wire Cout_out;
  wire [31:0] A;
  wire [31:0] B;
  wire [31:0] SUM_internal;
  wire [30:0] C;
  wire Cin, Cout_internal, n_0;
  fulladder adder0(.x (A[0]), .y (B[0]), .z (Cin), .sum
       (SUM_internal[0]), .carry (C[0]));
  fulladder_62 adder1(.x (A[1]), .y (B[1]), .z (C[0]), .sum
       (SUM_internal[1]), .carry (C[1]));
  fulladder_61 adder2(.x (A[2]), .y (B[2]), .z (C[1]), .sum
       (SUM_internal[2]), .carry (C[2]));
  fulladder_60 adder3(.x (A[3]), .y (B[3]), .z (C[2]), .sum
       (SUM_internal[3]), .carry (C[3]));
  fulladder_59 adder4(.x (A[4]), .y (B[4]), .z (C[3]), .sum
       (SUM_internal[4]), .carry (C[4]));
  fulladder_58 adder5(.x (A[5]), .y (B[5]), .z (C[4]), .sum
       (SUM_internal[5]), .carry (C[5]));
  fulladder_57 adder6(.x (A[6]), .y (B[6]), .z (C[5]), .sum
       (SUM_internal[6]), .carry (C[6]));
  fulladder_56 adder7(.x (A[7]), .y (B[7]), .z (C[6]), .sum
       (SUM_internal[7]), .carry (C[7]));
  fulladder_55 adder8(.x (A[8]), .y (B[8]), .z (C[7]), .sum
       (SUM_internal[8]), .carry (C[8]));
  fulladder_54 adder9(.x (A[9]), .y (B[9]), .z (C[8]), .sum
       (SUM_internal[9]), .carry (C[9]));
  fulladder_53 adder10(.x (A[10]), .y (B[10]), .z (C[9]), .sum
       (SUM_internal[10]), .carry (C[10]));
  fulladder_52 adder11(.x (A[11]), .y (B[11]), .z (C[10]), .sum
       (SUM_internal[11]), .carry (C[11]));
  fulladder_51 adder12(.x (A[12]), .y (B[12]), .z (C[11]), .sum
       (SUM_internal[12]), .carry (C[12]));
  fulladder_50 adder13(.x (A[13]), .y (B[13]), .z (C[12]), .sum
       (SUM_internal[13]), .carry (C[13]));
  fulladder_49 adder14(.x (A[14]), .y (B[14]), .z (C[13]), .sum
       (SUM_internal[14]), .carry (C[14]));
  fulladder_48 adder15(.x (A[15]), .y (B[15]), .z (C[14]), .sum
       (SUM_internal[15]), .carry (C[15]));
  fulladder_47 adder16(.x (A[16]), .y (B[16]), .z (C[15]), .sum
       (SUM_internal[16]), .carry (C[16]));
  fulladder_46 adder17(.x (A[17]), .y (B[17]), .z (C[16]), .sum
       (SUM_internal[17]), .carry (C[17]));
  fulladder_45 adder18(.x (A[18]), .y (B[18]), .z (C[17]), .sum
       (SUM_internal[18]), .carry (C[18]));
  fulladder_44 adder19(.x (A[19]), .y (B[19]), .z (C[18]), .sum
       (SUM_internal[19]), .carry (C[19]));
  fulladder_43 adder20(.x (A[20]), .y (B[20]), .z (C[19]), .sum
       (SUM_internal[20]), .carry (C[20]));
  fulladder_42 adder21(.x (A[21]), .y (B[21]), .z (C[20]), .sum
       (SUM_internal[21]), .carry (C[21]));
  fulladder_41 adder22(.x (A[22]), .y (B[22]), .z (C[21]), .sum
       (SUM_internal[22]), .carry (C[22]));
  fulladder_40 adder23(.x (A[23]), .y (B[23]), .z (C[22]), .sum
       (SUM_internal[23]), .carry (C[23]));
  fulladder_39 adder24(.x (A[24]), .y (B[24]), .z (C[23]), .sum
       (SUM_internal[24]), .carry (C[24]));
  fulladder_38 adder25(.x (A[25]), .y (B[25]), .z (C[24]), .sum
       (SUM_internal[25]), .carry (C[25]));
  fulladder_37 adder26(.x (A[26]), .y (B[26]), .z (C[25]), .sum
       (SUM_internal[26]), .carry (C[26]));
  fulladder_36 adder27(.x (A[27]), .y (B[27]), .z (C[26]), .sum
       (SUM_internal[27]), .carry (C[27]));
  fulladder_35 adder28(.x (A[28]), .y (B[28]), .z (C[27]), .sum
       (SUM_internal[28]), .carry (C[28]));
  fulladder_34 adder29(.x (A[29]), .y (B[29]), .z (C[28]), .sum
       (SUM_internal[29]), .carry (C[29]));
  fulladder_33 adder30(.x (A[30]), .y (B[30]), .z (C[29]), .sum
       (SUM_internal[30]), .carry (C[30]));
  fulladder_32 adder31(.x (A[31]), .y (B[31]), .z (C[30]), .sum
       (SUM_internal[31]), .carry (Cout_internal));
  DFFRHQX1 Cout_out_reg(.RN (n_0), .CK (clk), .D (Cout_internal), .Q
       (Cout_out));
  DFFRHQX1 \SUM_out_reg[31] (.RN (n_0), .CK (clk), .D
       (SUM_internal[31]), .Q (SUM_out[31]));
  DFFRHQX1 \SUM_out_reg[30] (.RN (n_0), .CK (clk), .D
       (SUM_internal[30]), .Q (SUM_out[30]));
  DFFRHQX1 \SUM_out_reg[29] (.RN (n_0), .CK (clk), .D
       (SUM_internal[29]), .Q (SUM_out[29]));
  DFFRHQX1 \SUM_out_reg[28] (.RN (n_0), .CK (clk), .D
       (SUM_internal[28]), .Q (SUM_out[28]));
  DFFRHQX1 \SUM_out_reg[27] (.RN (n_0), .CK (clk), .D
       (SUM_internal[27]), .Q (SUM_out[27]));
  DFFRHQX1 \SUM_out_reg[26] (.RN (n_0), .CK (clk), .D
       (SUM_internal[26]), .Q (SUM_out[26]));
  DFFRHQX1 \SUM_out_reg[25] (.RN (n_0), .CK (clk), .D
       (SUM_internal[25]), .Q (SUM_out[25]));
  DFFRHQX1 \SUM_out_reg[24] (.RN (n_0), .CK (clk), .D
       (SUM_internal[24]), .Q (SUM_out[24]));
  DFFRHQX1 \SUM_out_reg[23] (.RN (n_0), .CK (clk), .D
       (SUM_internal[23]), .Q (SUM_out[23]));
  DFFRHQX1 \SUM_out_reg[22] (.RN (n_0), .CK (clk), .D
       (SUM_internal[22]), .Q (SUM_out[22]));
  DFFRHQX1 \SUM_out_reg[21] (.RN (n_0), .CK (clk), .D
       (SUM_internal[21]), .Q (SUM_out[21]));
  DFFRHQX1 \SUM_out_reg[20] (.RN (n_0), .CK (clk), .D
       (SUM_internal[20]), .Q (SUM_out[20]));
  DFFRHQX1 \SUM_out_reg[19] (.RN (n_0), .CK (clk), .D
       (SUM_internal[19]), .Q (SUM_out[19]));
  DFFRHQX1 \SUM_out_reg[18] (.RN (n_0), .CK (clk), .D
       (SUM_internal[18]), .Q (SUM_out[18]));
  DFFRHQX1 \SUM_out_reg[17] (.RN (n_0), .CK (clk), .D
       (SUM_internal[17]), .Q (SUM_out[17]));
  DFFRHQX1 \SUM_out_reg[16] (.RN (n_0), .CK (clk), .D
       (SUM_internal[16]), .Q (SUM_out[16]));
  DFFRHQX1 \SUM_out_reg[15] (.RN (n_0), .CK (clk), .D
       (SUM_internal[15]), .Q (SUM_out[15]));
  DFFRHQX1 \SUM_out_reg[14] (.RN (n_0), .CK (clk), .D
       (SUM_internal[14]), .Q (SUM_out[14]));
  DFFRHQX1 \SUM_out_reg[13] (.RN (n_0), .CK (clk), .D
       (SUM_internal[13]), .Q (SUM_out[13]));
  DFFRHQX1 \SUM_out_reg[12] (.RN (n_0), .CK (clk), .D
       (SUM_internal[12]), .Q (SUM_out[12]));
  DFFRHQX1 \SUM_out_reg[11] (.RN (n_0), .CK (clk), .D
       (SUM_internal[11]), .Q (SUM_out[11]));
  DFFRHQX1 \SUM_out_reg[10] (.RN (n_0), .CK (clk), .D
       (SUM_internal[10]), .Q (SUM_out[10]));
  DFFRHQX1 \SUM_out_reg[9] (.RN (n_0), .CK (clk), .D (SUM_internal[9]),
       .Q (SUM_out[9]));
  DFFRHQX1 \SUM_out_reg[8] (.RN (n_0), .CK (clk), .D (SUM_internal[8]),
       .Q (SUM_out[8]));
  DFFRHQX1 \SUM_out_reg[7] (.RN (n_0), .CK (clk), .D (SUM_internal[7]),
       .Q (SUM_out[7]));
  DFFRHQX1 \SUM_out_reg[6] (.RN (n_0), .CK (clk), .D (SUM_internal[6]),
       .Q (SUM_out[6]));
  DFFRHQX1 \SUM_out_reg[5] (.RN (n_0), .CK (clk), .D (SUM_internal[5]),
       .Q (SUM_out[5]));
  DFFRHQX1 \SUM_out_reg[4] (.RN (n_0), .CK (clk), .D (SUM_internal[4]),
       .Q (SUM_out[4]));
  DFFRHQX1 \SUM_out_reg[3] (.RN (n_0), .CK (clk), .D (SUM_internal[3]),
       .Q (SUM_out[3]));
  DFFRHQX1 \SUM_out_reg[2] (.RN (n_0), .CK (clk), .D (SUM_internal[2]),
       .Q (SUM_out[2]));
  DFFRHQX1 \SUM_out_reg[1] (.RN (n_0), .CK (clk), .D (SUM_internal[1]),
       .Q (SUM_out[1]));
  DFFRHQX1 \SUM_out_reg[0] (.RN (n_0), .CK (clk), .D (SUM_internal[0]),
       .Q (SUM_out[0]));
  DFFRHQX1 \A_reg[29] (.RN (n_0), .CK (clk), .D (A_in[29]), .Q (A[29]));
  DFFRHQX1 \B_reg[2] (.RN (n_0), .CK (clk), .D (B_in[2]), .Q (B[2]));
  DFFRHQX1 \B_reg[6] (.RN (n_0), .CK (clk), .D (B_in[6]), .Q (B[6]));
  DFFRHQX1 \B_reg[14] (.RN (n_0), .CK (clk), .D (B_in[14]), .Q (B[14]));
  DFFRHQX1 \A_reg[10] (.RN (n_0), .CK (clk), .D (A_in[10]), .Q (A[10]));
  DFFRHQX1 \A_reg[12] (.RN (n_0), .CK (clk), .D (A_in[12]), .Q (A[12]));
  DFFRHQX1 \A_reg[30] (.RN (n_0), .CK (clk), .D (A_in[30]), .Q (A[30]));
  DFFRHQX1 \B_reg[4] (.RN (n_0), .CK (clk), .D (B_in[4]), .Q (B[4]));
  DFFRHQX1 \A_reg[26] (.RN (n_0), .CK (clk), .D (A_in[26]), .Q (A[26]));
  DFFRHQX1 \B_reg[0] (.RN (n_0), .CK (clk), .D (B_in[0]), .Q (B[0]));
  DFFRHQX1 \B_reg[24] (.RN (n_0), .CK (clk), .D (B_in[24]), .Q (B[24]));
  DFFRHQX1 \B_reg[22] (.RN (n_0), .CK (clk), .D (B_in[22]), .Q (B[22]));
  DFFRHQX1 Cin_reg(.RN (n_0), .CK (clk), .D (Cin_in), .Q (Cin));
  DFFRHQX1 \A_reg[31] (.RN (n_0), .CK (clk), .D (A_in[31]), .Q (A[31]));
  DFFRHQX1 \B_reg[31] (.RN (n_0), .CK (clk), .D (B_in[31]), .Q (B[31]));
  DFFRHQX1 \B_reg[30] (.RN (n_0), .CK (clk), .D (B_in[30]), .Q (B[30]));
  DFFRHQX1 \A_reg[8] (.RN (n_0), .CK (clk), .D (A_in[8]), .Q (A[8]));
  DFFRHQX1 \B_reg[29] (.RN (n_0), .CK (clk), .D (B_in[29]), .Q (B[29]));
  DFFRHQX1 \A_reg[28] (.RN (n_0), .CK (clk), .D (A_in[28]), .Q (A[28]));
  DFFRHQX1 \B_reg[28] (.RN (n_0), .CK (clk), .D (B_in[28]), .Q (B[28]));
  DFFRHQX1 \A_reg[27] (.RN (n_0), .CK (clk), .D (A_in[27]), .Q (A[27]));
  DFFRHQX1 \B_reg[27] (.RN (n_0), .CK (clk), .D (B_in[27]), .Q (B[27]));
  DFFRHQX1 \B_reg[26] (.RN (n_0), .CK (clk), .D (B_in[26]), .Q (B[26]));
  DFFRHQX1 \B_reg[25] (.RN (n_0), .CK (clk), .D (B_in[25]), .Q (B[25]));
  DFFRHQX1 \A_reg[25] (.RN (n_0), .CK (clk), .D (A_in[25]), .Q (A[25]));
  DFFRHQX1 \A_reg[24] (.RN (n_0), .CK (clk), .D (A_in[24]), .Q (A[24]));
  DFFRHQX1 \B_reg[23] (.RN (n_0), .CK (clk), .D (B_in[23]), .Q (B[23]));
  DFFRHQX1 \A_reg[23] (.RN (n_0), .CK (clk), .D (A_in[23]), .Q (A[23]));
  DFFRHQX1 \A_reg[22] (.RN (n_0), .CK (clk), .D (A_in[22]), .Q (A[22]));
  DFFRHQX1 \B_reg[21] (.RN (n_0), .CK (clk), .D (B_in[21]), .Q (B[21]));
  DFFRHQX1 \A_reg[21] (.RN (n_0), .CK (clk), .D (A_in[21]), .Q (A[21]));
  DFFRHQX1 \A_reg[20] (.RN (n_0), .CK (clk), .D (A_in[20]), .Q (A[20]));
  DFFRHQX1 \B_reg[9] (.RN (n_0), .CK (clk), .D (B_in[9]), .Q (B[9]));
  DFFRHQX1 \A_reg[19] (.RN (n_0), .CK (clk), .D (A_in[19]), .Q (A[19]));
  DFFRHQX1 \B_reg[16] (.RN (n_0), .CK (clk), .D (B_in[16]), .Q (B[16]));
  DFFRHQX1 \A_reg[18] (.RN (n_0), .CK (clk), .D (A_in[18]), .Q (A[18]));
  DFFRHQX1 \B_reg[17] (.RN (n_0), .CK (clk), .D (B_in[17]), .Q (B[17]));
  DFFRHQX1 \A_reg[17] (.RN (n_0), .CK (clk), .D (A_in[17]), .Q (A[17]));
  DFFRHQX1 \A_reg[16] (.RN (n_0), .CK (clk), .D (A_in[16]), .Q (A[16]));
  DFFRHQX1 \B_reg[15] (.RN (n_0), .CK (clk), .D (B_in[15]), .Q (B[15]));
  DFFRHQX1 \A_reg[15] (.RN (n_0), .CK (clk), .D (A_in[15]), .Q (A[15]));
  DFFRHQX1 \A_reg[14] (.RN (n_0), .CK (clk), .D (A_in[14]), .Q (A[14]));
  DFFRHQX1 \A_reg[13] (.RN (n_0), .CK (clk), .D (A_in[13]), .Q (A[13]));
  DFFRHQX1 \B_reg[13] (.RN (n_0), .CK (clk), .D (B_in[13]), .Q (B[13]));
  DFFRHQX1 \B_reg[12] (.RN (n_0), .CK (clk), .D (B_in[12]), .Q (B[12]));
  DFFRHQX1 \B_reg[11] (.RN (n_0), .CK (clk), .D (B_in[11]), .Q (B[11]));
  DFFRHQX1 \A_reg[11] (.RN (n_0), .CK (clk), .D (A_in[11]), .Q (A[11]));
  DFFRHQX1 \B_reg[10] (.RN (n_0), .CK (clk), .D (B_in[10]), .Q (B[10]));
  DFFRHQX1 \B_reg[19] (.RN (n_0), .CK (clk), .D (B_in[19]), .Q (B[19]));
  DFFRHQX1 \A_reg[9] (.RN (n_0), .CK (clk), .D (A_in[9]), .Q (A[9]));
  DFFRHQX1 \B_reg[8] (.RN (n_0), .CK (clk), .D (B_in[8]), .Q (B[8]));
  DFFRHQX1 \B_reg[7] (.RN (n_0), .CK (clk), .D (B_in[7]), .Q (B[7]));
  DFFRHQX1 \A_reg[7] (.RN (n_0), .CK (clk), .D (A_in[7]), .Q (A[7]));
  DFFRHQX1 \B_reg[18] (.RN (n_0), .CK (clk), .D (B_in[18]), .Q (B[18]));
  DFFRHQX1 \A_reg[6] (.RN (n_0), .CK (clk), .D (A_in[6]), .Q (A[6]));
  DFFRHQX1 \B_reg[5] (.RN (n_0), .CK (clk), .D (B_in[5]), .Q (B[5]));
  DFFRHQX1 \A_reg[5] (.RN (n_0), .CK (clk), .D (A_in[5]), .Q (A[5]));
  DFFRHQX1 \A_reg[4] (.RN (n_0), .CK (clk), .D (A_in[4]), .Q (A[4]));
  DFFRHQX1 \A_reg[3] (.RN (n_0), .CK (clk), .D (A_in[3]), .Q (A[3]));
  DFFRHQX1 \B_reg[3] (.RN (n_0), .CK (clk), .D (B_in[3]), .Q (B[3]));
  DFFRHQX1 \A_reg[2] (.RN (n_0), .CK (clk), .D (A_in[2]), .Q (A[2]));
  DFFRHQX1 \B_reg[1] (.RN (n_0), .CK (clk), .D (B_in[1]), .Q (B[1]));
  DFFRHQX1 \A_reg[1] (.RN (n_0), .CK (clk), .D (A_in[1]), .Q (A[1]));
  DFFRHQX1 \A_reg[0] (.RN (n_0), .CK (clk), .D (A_in[0]), .Q (A[0]));
  DFFRHQX1 \B_reg[20] (.RN (n_0), .CK (clk), .D (B_in[20]), .Q (B[20]));
  INVXL g105(.A (reset), .Y (n_0));
endmodule

