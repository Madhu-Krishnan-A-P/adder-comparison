
// Generated by Cadence Genus(TM) Synthesis Solution 20.11-s111_1
// Generated on: Dec 12 2024 17:06:05 IST (Dec 12 2024 11:36:05 UTC)

// Verification Directory fv/RCA 

module fulladder(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2, n_3;
  OAI21X1 g83(.A0 (n_0), .A1 (n_2), .B0 (n_1), .Y (carry));
  MXI2XL g84(.A (n_0), .B (z), .S0 (n_3), .Y (sum));
  CLKXOR2X1 g85(.A (x), .B (y), .Y (n_3));
  NOR2X1 g86(.A (x), .B (y), .Y (n_2));
  NAND2XL g87(.A (x), .B (y), .Y (n_1));
  CLKINVX1 g88(.A (z), .Y (n_0));
endmodule

module fulladder_14(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2, n_3, n_4;
  OAI2BB1X1 g44(.A0N (n_4), .A1N (z), .B0 (n_3), .Y (carry));
  XOR2XL g45(.A (n_4), .B (n_0), .Y (sum));
  OAI22X1 g46(.A0 (y), .A1 (n_2), .B0 (x), .B1 (n_1), .Y (n_4));
  NAND2XL g47(.A (x), .B (y), .Y (n_3));
  CLKINVX1 g48(.A (x), .Y (n_2));
  CLKINVX1 g49(.A (y), .Y (n_1));
  DLY2X1 g50(.A (z), .Y (n_0));
endmodule

module fulladder_13(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1;
  XOR2X1 g45(.A (z), .B (n_0), .Y (sum));
  NAND2X1 g46(.A (n_0), .B (z), .Y (n_1));
  CLKXOR2X1 g2(.A (x), .B (y), .Y (n_0));
  OAI2BB1X1 g49(.A0N (x), .A1N (y), .B0 (n_1), .Y (carry));
endmodule

module fulladder_12(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_3, n_14;
  XOR2XL g48(.A (z), .B (n_14), .Y (sum));
  NAND2X1 g52(.A (n_14), .B (z), .Y (n_3));
  CLKXOR2X1 g63(.A (x), .B (y), .Y (n_14));
  OAI2BB1X1 g64(.A0N (y), .A1N (x), .B0 (n_3), .Y (carry));
endmodule

module fulladder_11(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_2, n_3;
  XOR2X1 g48(.A (z), .B (n_2), .Y (sum));
  NAND2X1 g49(.A (n_2), .B (z), .Y (n_3));
  CLKXOR2X1 g50(.A (x), .B (y), .Y (n_2));
  NAND2X1 g2(.A (n_1), .B (n_3), .Y (carry));
  NAND2XL g3(.A (x), .B (y), .Y (n_1));
endmodule

module fulladder_10(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_1, n_2, n_3;
  XOR2X1 g48(.A (z), .B (n_2), .Y (sum));
  NAND2X1 g49(.A (n_2), .B (z), .Y (n_3));
  CLKXOR2X1 g50(.A (x), .B (y), .Y (n_2));
  NAND2X1 g2(.A (n_1), .B (n_3), .Y (carry));
  NAND2XL g3(.A (x), .B (y), .Y (n_1));
endmodule

module fulladder_9(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_3, n_4;
  NAND2X1 g46(.A (n_3), .B (z), .Y (n_4));
  CLKXOR2X1 g47(.A (x), .B (y), .Y (n_3));
  XOR2XL g51(.A (z), .B (n_3), .Y (sum));
  OAI2BB1X1 g52(.A0N (x), .A1N (y), .B0 (n_4), .Y (carry));
endmodule

module fulladder_8(x, y, z, sum, carry);
  input x, y, z;
  output sum, carry;
  wire x, y, z;
  wire sum, carry;
  wire n_0, n_1, n_2;
  OAI21XL g41(.A0 (n_2), .A1 (n_0), .B0 (n_1), .Y (carry));
  MXI2XL g42(.A (z), .B (n_0), .S0 (n_2), .Y (sum));
  XNOR2X1 g43(.A (x), .B (y), .Y (n_2));
  NAND2XL g44(.A (x), .B (y), .Y (n_1));
  INVX1 g45(.A (z), .Y (n_0));
endmodule

module RCA(clk, reset, A_in, B_in, Cin_in, SUM_out, Cout_out);
  input clk, reset, Cin_in;
  input [7:0] A_in, B_in;
  output [7:0] SUM_out;
  output Cout_out;
  wire clk, reset, Cin_in;
  wire [7:0] A_in, B_in;
  wire [7:0] SUM_out;
  wire Cout_out;
  wire [7:0] A;
  wire [7:0] B;
  wire [7:0] SUM_internal;
  wire C1, C2, C3, C4, C5, C6, C7, Cin;
  wire Cout_internal, n_0;
  fulladder adder0(.x (A[0]), .y (B[0]), .z (Cin), .sum
       (SUM_internal[0]), .carry (C1));
  fulladder_14 adder1(.x (A[1]), .y (B[1]), .z (C1), .sum
       (SUM_internal[1]), .carry (C2));
  fulladder_13 adder2(.x (A[2]), .y (B[2]), .z (C2), .sum
       (SUM_internal[2]), .carry (C3));
  fulladder_12 adder3(.x (A[3]), .y (B[3]), .z (C3), .sum
       (SUM_internal[3]), .carry (C4));
  fulladder_11 adder4(.x (A[4]), .y (B[4]), .z (C4), .sum
       (SUM_internal[4]), .carry (C5));
  fulladder_10 adder5(.x (A[5]), .y (B[5]), .z (C5), .sum
       (SUM_internal[5]), .carry (C6));
  fulladder_9 adder6(.x (A[6]), .y (B[6]), .z (C6), .sum
       (SUM_internal[6]), .carry (C7));
  fulladder_8 adder7(.x (A[7]), .y (B[7]), .z (C7), .sum
       (SUM_internal[7]), .carry (Cout_internal));
  DFFRHQX8 \SUM_out_reg[7] (.RN (n_0), .CK (clk), .D (SUM_internal[7]),
       .Q (SUM_out[7]));
  DFFRHQX1 Cout_out_reg(.RN (n_0), .CK (clk), .D (Cout_internal), .Q
       (Cout_out));
  DFFRHQX1 \SUM_out_reg[6] (.RN (n_0), .CK (clk), .D (SUM_internal[6]),
       .Q (SUM_out[6]));
  DFFRHQX1 \SUM_out_reg[5] (.RN (n_0), .CK (clk), .D (SUM_internal[5]),
       .Q (SUM_out[5]));
  DFFRHQX1 \SUM_out_reg[4] (.RN (n_0), .CK (clk), .D (SUM_internal[4]),
       .Q (SUM_out[4]));
  DFFRHQX1 \SUM_out_reg[3] (.RN (n_0), .CK (clk), .D (SUM_internal[3]),
       .Q (SUM_out[3]));
  DFFRHQX1 \SUM_out_reg[2] (.RN (n_0), .CK (clk), .D (SUM_internal[2]),
       .Q (SUM_out[2]));
  DFFRHQX1 \SUM_out_reg[1] (.RN (n_0), .CK (clk), .D (SUM_internal[1]),
       .Q (SUM_out[1]));
  DFFRHQX1 \SUM_out_reg[0] (.RN (n_0), .CK (clk), .D (SUM_internal[0]),
       .Q (SUM_out[0]));
  DFFRHQX1 \A_reg[4] (.RN (n_0), .CK (clk), .D (A_in[4]), .Q (A[4]));
  DFFRHQX4 \A_reg[1] (.RN (n_0), .CK (clk), .D (A_in[1]), .Q (A[1]));
  DFFRHQX1 \B_reg[1] (.RN (n_0), .CK (clk), .D (B_in[1]), .Q (B[1]));
  DFFRHQX1 Cin_reg(.RN (n_0), .CK (clk), .D (Cin_in), .Q (Cin));
  DFFRHQX1 \B_reg[2] (.RN (n_0), .CK (clk), .D (B_in[2]), .Q (B[2]));
  DFFRHQX1 \A_reg[2] (.RN (n_0), .CK (clk), .D (A_in[2]), .Q (A[2]));
  DFFRHQX1 \A_reg[0] (.RN (n_0), .CK (clk), .D (A_in[0]), .Q (A[0]));
  DFFRHQX1 \A_reg[6] (.RN (n_0), .CK (clk), .D (A_in[6]), .Q (A[6]));
  DFFRHQX1 \B_reg[3] (.RN (n_0), .CK (clk), .D (B_in[3]), .Q (B[3]));
  DFFRHQX1 \A_reg[7] (.RN (n_0), .CK (clk), .D (A_in[7]), .Q (A[7]));
  DFFRHQX1 \B_reg[7] (.RN (n_0), .CK (clk), .D (B_in[7]), .Q (B[7]));
  DFFRHQX1 \B_reg[6] (.RN (n_0), .CK (clk), .D (B_in[6]), .Q (B[6]));
  DFFRHQX1 \A_reg[5] (.RN (n_0), .CK (clk), .D (A_in[5]), .Q (A[5]));
  DFFRHQX1 \B_reg[5] (.RN (n_0), .CK (clk), .D (B_in[5]), .Q (B[5]));
  DFFRHQX1 \B_reg[4] (.RN (n_0), .CK (clk), .D (B_in[4]), .Q (B[4]));
  DFFRHQX1 \A_reg[3] (.RN (n_0), .CK (clk), .D (A_in[3]), .Q (A[3]));
  DFFRHQX4 \B_reg[0] (.RN (n_0), .CK (clk), .D (B_in[0]), .Q (B[0]));
  INVXL g33(.A (reset), .Y (n_0));
endmodule

